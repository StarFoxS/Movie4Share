package com.example.star.movie4share.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.star.movie4share.entity.Product;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCT".
*/
public class ProductDao extends AbstractDao<Product, Long> {

    public static final String TABLENAME = "PRODUCT";

    /**
     * Properties of entity Product.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ProductName = new Property(1, String.class, "productName", false, "PRODUCT_NAME");
        public final static Property Price = new Property(2, double.class, "price", false, "PRICE");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property ShortDescription = new Property(4, String.class, "shortDescription", false, "SHORT_DESCRIPTION");
        public final static Property Url = new Property(5, String.class, "url", false, "URL");
        public final static Property UrlDescription = new Property(6, String.class, "urlDescription", false, "URL_DESCRIPTION");
        public final static Property StockNum = new Property(7, int.class, "stockNum", false, "STOCK_NUM");
        public final static Property LimitNum = new Property(8, int.class, "limitNum", false, "LIMIT_NUM");
        public final static Property BoughtNum = new Property(9, int.class, "boughtNum", false, "BOUGHT_NUM");
    }


    public ProductDao(DaoConfig config) {
        super(config);
    }
    
    public ProductDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRODUCT_NAME\" TEXT," + // 1: productName
                "\"PRICE\" REAL NOT NULL ," + // 2: price
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"SHORT_DESCRIPTION\" TEXT," + // 4: shortDescription
                "\"URL\" TEXT UNIQUE ," + // 5: url
                "\"URL_DESCRIPTION\" TEXT," + // 6: urlDescription
                "\"STOCK_NUM\" INTEGER NOT NULL ," + // 7: stockNum
                "\"LIMIT_NUM\" INTEGER NOT NULL ," + // 8: limitNum
                "\"BOUGHT_NUM\" INTEGER NOT NULL );"); // 9: boughtNum
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(2, productName);
        }
        stmt.bindDouble(3, entity.getPrice());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String shortDescription = entity.getShortDescription();
        if (shortDescription != null) {
            stmt.bindString(5, shortDescription);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String urlDescription = entity.getUrlDescription();
        if (urlDescription != null) {
            stmt.bindString(7, urlDescription);
        }
        stmt.bindLong(8, entity.getStockNum());
        stmt.bindLong(9, entity.getLimitNum());
        stmt.bindLong(10, entity.getBoughtNum());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Product entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String productName = entity.getProductName();
        if (productName != null) {
            stmt.bindString(2, productName);
        }
        stmt.bindDouble(3, entity.getPrice());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        String shortDescription = entity.getShortDescription();
        if (shortDescription != null) {
            stmt.bindString(5, shortDescription);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(6, url);
        }
 
        String urlDescription = entity.getUrlDescription();
        if (urlDescription != null) {
            stmt.bindString(7, urlDescription);
        }
        stmt.bindLong(8, entity.getStockNum());
        stmt.bindLong(9, entity.getLimitNum());
        stmt.bindLong(10, entity.getBoughtNum());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Product readEntity(Cursor cursor, int offset) {
        Product entity = new Product( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // productName
            cursor.getDouble(offset + 2), // price
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // shortDescription
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // url
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // urlDescription
            cursor.getInt(offset + 7), // stockNum
            cursor.getInt(offset + 8), // limitNum
            cursor.getInt(offset + 9) // boughtNum
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Product entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProductName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrice(cursor.getDouble(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShortDescription(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUrlDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStockNum(cursor.getInt(offset + 7));
        entity.setLimitNum(cursor.getInt(offset + 8));
        entity.setBoughtNum(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Product entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Product entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Product entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

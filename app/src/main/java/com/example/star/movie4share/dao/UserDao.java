package com.example.star.movie4share.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.star.movie4share.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property CustomId = new Property(1, String.class, "customId", false, "CUSTOM_ID");
        public final static Property Password = new Property(2, String.class, "password", false, "PASSWORD");
        public final static Property Showpw = new Property(3, int.class, "showpw", false, "SHOWPW");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property PhoneNum = new Property(6, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property ImgUrl = new Property(7, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Vip = new Property(8, double.class, "vip", false, "VIP");
        public final static Property CouponTotal = new Property(9, double.class, "couponTotal", false, "COUPON_TOTAL");
        public final static Property CouponMinus = new Property(10, double.class, "couponMinus", false, "COUPON_MINUS");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"CUSTOM_ID\" TEXT UNIQUE ," + // 1: customId
                "\"PASSWORD\" TEXT," + // 2: password
                "\"SHOWPW\" INTEGER NOT NULL ," + // 3: showpw
                "\"EMAIL\" TEXT," + // 4: email
                "\"NAME\" TEXT," + // 5: name
                "\"PHONE_NUM\" TEXT," + // 6: phoneNum
                "\"IMG_URL\" TEXT," + // 7: imgUrl
                "\"VIP\" REAL NOT NULL ," + // 8: vip
                "\"COUPON_TOTAL\" REAL NOT NULL ," + // 9: couponTotal
                "\"COUPON_MINUS\" REAL NOT NULL );"); // 10: couponMinus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindString(2, customId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
        stmt.bindLong(4, entity.getShowpw());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(7, phoneNum);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(8, imgUrl);
        }
        stmt.bindDouble(9, entity.getVip());
        stmt.bindDouble(10, entity.getCouponTotal());
        stmt.bindDouble(11, entity.getCouponMinus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String customId = entity.getCustomId();
        if (customId != null) {
            stmt.bindString(2, customId);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(3, password);
        }
        stmt.bindLong(4, entity.getShowpw());
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(7, phoneNum);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(8, imgUrl);
        }
        stmt.bindDouble(9, entity.getVip());
        stmt.bindDouble(10, entity.getCouponTotal());
        stmt.bindDouble(11, entity.getCouponMinus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // password
            cursor.getInt(offset + 3), // showpw
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phoneNum
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // imgUrl
            cursor.getDouble(offset + 8), // vip
            cursor.getDouble(offset + 9), // couponTotal
            cursor.getDouble(offset + 10) // couponMinus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCustomId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShowpw(cursor.getInt(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhoneNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImgUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setVip(cursor.getDouble(offset + 8));
        entity.setCouponTotal(cursor.getDouble(offset + 9));
        entity.setCouponMinus(cursor.getDouble(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
